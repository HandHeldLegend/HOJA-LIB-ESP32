The RMT peripheral to respond to GameCube leaves some to be desired.

Primarily the time it takes for the RMT peripheral to load and send data is
problematic for some titles such as Rogue Squadron II. 

This is some notes because the ESP-IDF documentation on the RMT peripheral
is rather abysmal and BlueRetro from DarthCloud seems to have some great insights.

Resource: https://github.com/darthcloud/BlueRetro/blob/master/main/wired/nsi.c

a pointer is set up to RMTMEM.chan[0].data32

See rmt_struct.h for additional information!

There are 8 channels that can hold 64 rmt_item32_t each. 
Each rmt_item32_t represents one bit of data. 

By increasing the pointer in a loop, data can be written to the next channel.

This is one portion of the problem: the incoming data and outgoing data are
using the same memory buffer.

Basically what has to happen is something like this 

a pointer is set for incoming data.
a pointer is set which is equal to the previous pointer plus a value
which allows for the outgoing data to be set before we need to send it.

This ensures that the data for TX is set and is ready to respond at a given notice.

Here's my plan:
preload data into the buffer. We will have a canned response for PROBE and ORIGIN commands. 

there will be data loaded for the POLL command which will be dynamically updated
after we get a button state update. 

we reserve the first channel of bits (8 bytes) for incoming data to read it.

This way, we never have to worry about conflicting data and we can use pre-compiled
pointer index values to know where to read/send data. 

We need 171 bits total to ensure we have enough room.
We can use 3 or 4 different channels for the outgoing data.

To access RMT channel settings, it would look like this

RMT.conf_ch[CHANNEL_NUM].conf0 or conf1